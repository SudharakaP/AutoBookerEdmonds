name: Booking Action

env:
  ED_USERNAME: ${{ secrets.ED_USERNAME }}
  ED_PASSWORD: ${{ secrets.ED_PASSWORD }}
  CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
  SENDING_EMAILS: ${{ secrets.SENDING_EMAILS }}
  EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  LOGINS: ${{ vars.LOGINS }}
  SIGN_IN_URL: ${{ vars.SIGN_IN_URL }}
  EXEC_MINS: ${{ vars.EXEC_MINS }}

# Controls when the workflow will run
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow through a webhook event
  repository_dispatch:
    types: [booking]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  define-env:
    runs-on: ubuntu-22.04
    environment:
      name: ${{ github.event.client_payload.environment || 'test' }}
    outputs:
      PERSONS: ${{ steps.compute-outputs.outputs.PERSONS }}
      BOOKING_URL: ${{ steps.compute-outputs.outputs.BOOKING_URL }}
    steps:
      - id: compute-outputs
        name: Compute Outputs
        run: |
          echo "PERSONS=${{ toJson(vars.PERSONS) }}" >> "$GITHUB_OUTPUT"
          echo "BOOKING_URL=${{ vars.BOOKING_URL }}" >> "$GITHUB_OUTPUT"
  add-persons:
    needs: define-env
    env:
      BOOKING_URL: ${{ needs.define-env.outputs.BOOKING_URL }}
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        person: ${{ fromJson(needs.define-env.outputs.PERSONS) }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup-project
        with:
          DECRYPTION_SECRET: ${{ secrets.DECRYPTION_SECRET }}

      # Setup FFmpeg
      # Note: Keep setup-ffmpeg@v2 due to https://github.com/federicocarboni/setup-ffmpeg/issues/19
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3

      # Runs Puppeteer
      - name: Run Puppeteer
        run: export PERSON="${{ matrix.person }}" ENV_NAME="${{ github.event.client_payload.environment || 'test' }}" && node add-to-cart.mjs

      # Archive Debug Logs
      - name: Archive Debug Logs
        if: always()
        continue-on-error: true
        run: tar -czvf "debug-logs-${{ matrix.person }}.tar.gz" "screenshot-${{ matrix.person }}.png" "screenshot-final-${{ matrix.person }}.png" "recording-${{ matrix.person }}.webm"

      # Encrypt Debug Logs
      - name: Encrypt Debug Logs
        if: always()
        run: gpg --batch -c --passphrase ${{ secrets.ARTIFACT_ENCRYPTION_PASS }} "debug-logs-${{ matrix.person }}.tar.gz"

      # Uploads results
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: debug-logs-${{ matrix.person }}
          path: debug-logs-${{ matrix.person }}.tar.gz.gpg
  book-missed-slots:
    if: always()
    needs: add-persons
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup-project
        with:
          DECRYPTION_SECRET: ${{ secrets.DECRYPTION_SECRET }}

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Run Puppeteer
        run: node book-missed-slots.mjs

      - name: Archive Debug Logs
        if: always()
        continue-on-error: true
        run: tar -czvf "debug-logs-book-missed-slots.tar.gz" "screenshot-book-missed-slots.png" "screenshot-final-book-missed-slots.png" "recording-book-missed-slots.webm"

      - name: Encrypt Debug Logs
        if: always()
        run: gpg --batch -c --passphrase ${{ secrets.ARTIFACT_ENCRYPTION_PASS }} "debug-logs-book-missed-slots.tar.gz"

      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: debug-logs-book-missed-slots
          path: debug-logs-book-missed-slots.tar.gz.gpg
